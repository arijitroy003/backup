    
Algo_Bisection()
{
    INPUT: Function f, 
           endpoint values a, b
        
    CONDITIONS: a < b, 
                either f(a) < 0 and f(b) > 0 or f(a) > 0 and f(b) < 0
    OUTPUT: value which differs from a root of f(x) = 0 by less than TOL
     
    N ← 1
    While f(c) tends to 0
      c ← (a + b)/2 # new midpoint
      If f(c) = 0 or (b – a)/2 < TOL then # solution found
        Output(c)
        Stop
      EndIf
      N ← N + 1 # increment step counter
    EndWhile
}

Algo_RegulaFalsi()
{
   INPUT: Function f, 
           endpoint values a, b

   CONDITIONS: a < b, 
                either f(a) < 0 and f(b) > 0 or f(a) > 0 and f(b) < 0
   OUTPUT: value which differs from a root of f(x) = 0 by less than TOL

   N ← 1
   While f(x) tends to 0
    h ← abs(f(a))*(b-a)/(abs(f(a)) + abs(f(b)))
    x ← x + h
      If f(x) > 0
        b ← x
      Else If f(x) < 0
          a ← x
      Else
        Output x
        Stop
      EndIf
    N ← N + 1 # increment step counter
  EndWhile  
}

Algo_NewtonRaphson()
{
   INPUT: Function f, 
           endpoint values a, b

   CONDITIONS: a < b, 
                either f(a) < 0 and f(b) > 0 or f(a) > 0 and f(b) < 0
   OUTPUT: value which differs from a root of f(x) = 0 by less than TOL

   N ← 1
   x ← a
   x1 ← 0
   While f(x) tends to 0
    x ← x1
    h ← (-1)*f(x)/f'(x)
    x1 ← x + h
    N ← N + 1 # increment step counter
  EndWhile
  Output x
  Stop
}